<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StringId.CaptionError" xml:space="preserve">
    <value>Erreur</value>
  </data>
  <data name="StringId.InvalidValueText" xml:space="preserve">
    <value>Valeur invalide</value>
  </data>
  <data name="StringId.CheckChecked" xml:space="preserve">
    <value>Coché</value>
  </data>
  <data name="StringId.CheckUnchecked" xml:space="preserve">
    <value>Décoché</value>
  </data>
  <data name="StringId.CheckIndeterminate" xml:space="preserve">
    <value>Indéterminé</value>
  </data>
  <data name="StringId.DateEditToday" xml:space="preserve">
    <value>Aujourd'hui</value>
  </data>
  <data name="StringId.DateEditClear" xml:space="preserve">
    <value>Effacer</value>
  </data>
  <data name="StringId.OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="StringId.Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="StringId.NavigatorFirstButtonHint" xml:space="preserve">
    <value>Premier</value>
  </data>
  <data name="StringId.NavigatorPreviousButtonHint" xml:space="preserve">
    <value>Précédent</value>
  </data>
  <data name="StringId.NavigatorPreviousPageButtonHint" xml:space="preserve">
    <value>Page précédente</value>
  </data>
  <data name="StringId.NavigatorNextButtonHint" xml:space="preserve">
    <value>Suivant</value>
  </data>
  <data name="StringId.NavigatorNextPageButtonHint" xml:space="preserve">
    <value>Page suivante</value>
  </data>
  <data name="StringId.NavigatorLastButtonHint" xml:space="preserve">
    <value>Dernier</value>
  </data>
  <data name="StringId.NavigatorAppendButtonHint" xml:space="preserve">
    <value>Ajouter</value>
  </data>
  <data name="StringId.NavigatorRemoveButtonHint" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="StringId.NavigatorEditButtonHint" xml:space="preserve">
    <value>Editer</value>
  </data>
  <data name="StringId.NavigatorEndEditButtonHint" xml:space="preserve">
    <value>Fin de modification</value>
  </data>
  <data name="StringId.NavigatorCancelEditButtonHint" xml:space="preserve">
    <value>Annuler la modification</value>
  </data>
  <data name="StringId.NavigatorTextStringFormat" xml:space="preserve">
    <value>Enregistrement {0} sur {1}</value>
  </data>
  <data name="StringId.PictureEditMenuCut" xml:space="preserve">
    <value>Couper</value>
  </data>
  <data name="StringId.PictureEditMenuCopy" xml:space="preserve">
    <value>Copier</value>
  </data>
  <data name="StringId.PictureEditMenuPaste" xml:space="preserve">
    <value>Coller</value>
  </data>
  <data name="StringId.PictureEditMenuDelete" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="StringId.PictureEditMenuLoad" xml:space="preserve">
    <value>Charger</value>
  </data>
  <data name="StringId.PictureEditMenuSave" xml:space="preserve">
    <value>Enregistrer</value>
  </data>
  <data name="StringId.PictureEditOpenFileTitle" xml:space="preserve">
    <value>Ouvrir</value>
  </data>
  <data name="StringId.PictureEditSaveFileTitle" xml:space="preserve">
    <value>Enregistrer sous</value>
  </data>
  <data name="StringId.PictureEditOpenFileError" xml:space="preserve">
    <value>Format d'image invalide</value>
  </data>
  <data name="StringId.PictureEditOpenFileErrorCaption" xml:space="preserve">
    <value>Erreur à l'ouverture</value>
  </data>
  <data name="StringId.PictureEditCopyImageError" xml:space="preserve">
    <value>Impossible de copier l'image</value>
  </data>
  <data name="StringId.LookUpEditValueIsNull" xml:space="preserve">
    <value>[Valeur nulle]</value>
  </data>
  <data name="StringId.LookUpInvalidEditValueType" xml:space="preserve">
    <value>Type de valeur du LookUpEdit invalide.</value>
  </data>
  <data name="StringId.LookUpColumnDefaultName" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="StringId.PictureEditOpenFileFilter" xml:space="preserve">
    <value>Fichiers Bitmap (*.bmp)|*.bmp|Graphics Interchange Format (*.gif)|*.gif|JPEG File Interchange Format (*.jpg;*.jpeg)|*.jpg;*.jpeg|Icônes (*.ico)|*.ico|Tous les fichiers d'images |*.bmp;*.gif;*.jpg;*.jpeg;*.ico;*.png;*.tif|Tous les fichiers |*.*</value>
  </data>
  <data name="StringId.PictureEditSaveFileFilter" xml:space="preserve">
    <value>Fichiers Bitmap (*.bmp)|*.bmp|Graphics Interchange Format (*.gif)|*.gif|JPEG File Interchange Format (*.jpg)|*.jpg</value>
  </data>
  <data name="StringId.MaskBoxValidateError" xml:space="preserve">
    <value>La valeur entrée est incomplète. Voulez-vous la corriger?
  
  
  Oui – corriger la valeur.
  Non – laisser la valeur telle quelle.
  Annuler – recharger l'ancienne valeur.
  </value>
  </data>
  <data name="StringId.UnknownPictureFormat" xml:space="preserve">
    <value>Format d'image inconnu</value>
  </data>
  <data name="StringId.DataEmpty" xml:space="preserve">
    <value>Aucune image</value>
  </data>
  <data name="StringId.NotValidArrayLength" xml:space="preserve">
    <value>Longueur de tableau invalide.</value>
  </data>
  <data name="StringId.ImagePopupEmpty" xml:space="preserve">
    <value>(Vide)</value>
  </data>
  <data name="StringId.ImagePopupPicture" xml:space="preserve">
    <value>(Image)</value>
  </data>
  <data name="StringId.ColorTabCustom" xml:space="preserve">
    <value>Personnalisé</value>
  </data>
  <data name="StringId.ColorTabWeb" xml:space="preserve">
    <value>Web</value>
  </data>
  <data name="StringId.ColorTabSystem" xml:space="preserve">
    <value>Système</value>
  </data>
  <data name="StringId.CalcButtonMC" xml:space="preserve">
    <value>MC</value>
  </data>
  <data name="StringId.CalcButtonMR" xml:space="preserve">
    <value>MR</value>
  </data>
  <data name="StringId.CalcButtonMS" xml:space="preserve">
    <value>MS</value>
  </data>
  <data name="StringId.CalcButtonMx" xml:space="preserve">
    <value>M+</value>
  </data>
  <data name="StringId.CalcButtonSqrt" xml:space="preserve">
    <value>Racine²</value>
  </data>
  <data name="StringId.CalcButtonBack" xml:space="preserve">
    <value>Retour</value>
  </data>
  <data name="StringId.CalcButtonCE" xml:space="preserve">
    <value>CE</value>
  </data>
  <data name="StringId.CalcButtonC" xml:space="preserve">
    <value>C</value>
  </data>
  <data name="StringId.CalcError" xml:space="preserve">
    <value>Erreur de calcul</value>
  </data>
  <data name="StringId.TabHeaderButtonPrev" xml:space="preserve">
    <value>Défiler à gauche</value>
  </data>
  <data name="StringId.TabHeaderButtonNext" xml:space="preserve">
    <value>Défiler à droite</value>
  </data>
  <data name="StringId.TabHeaderButtonClose" xml:space="preserve">
    <value>Fermer</value>
  </data>
  <data name="StringId.XtraMessageBoxOkButtonText" xml:space="preserve">
    <value>&amp;OK</value>
  </data>
  <data name="StringId.XtraMessageBoxCancelButtonText" xml:space="preserve">
    <value>&amp;Annuler</value>
  </data>
  <data name="StringId.XtraMessageBoxYesButtonText" xml:space="preserve">
    <value>&amp;Oui</value>
  </data>
  <data name="StringId.XtraMessageBoxNoButtonText" xml:space="preserve">
    <value>&amp;Non</value>
  </data>
  <data name="StringId.XtraMessageBoxAbortButtonText" xml:space="preserve">
    <value>A&amp;rrêter</value>
  </data>
  <data name="StringId.XtraMessageBoxRetryButtonText" xml:space="preserve">
    <value>&amp;Réessayer</value>
  </data>
  <data name="StringId.XtraMessageBoxIgnoreButtonText" xml:space="preserve">
    <value>&amp;Ignorer</value>
  </data>
  <data name="StringId.TextEditMenuUndo" xml:space="preserve">
    <value>&amp;Annuler</value>
  </data>
  <data name="StringId.TextEditMenuCut" xml:space="preserve">
    <value>Cou&amp;per</value>
  </data>
  <data name="StringId.TextEditMenuCopy" xml:space="preserve">
    <value>&amp;Copier</value>
  </data>
  <data name="StringId.TextEditMenuPaste" xml:space="preserve">
    <value>Co&amp;ller</value>
  </data>
  <data name="StringId.TextEditMenuDelete" xml:space="preserve">
    <value>&amp;Supprimer</value>
  </data>
  <data name="StringId.TextEditMenuSelectAll" xml:space="preserve">
    <value>Tou&amp;t sélectionner</value>
  </data>
  <data name="StringId.FilterShowAll" xml:space="preserve">
    <value>(Tout montrer)</value>
  </data>
  <data name="StringId.FilterGroupAnd" xml:space="preserve">
    <value>Et</value>
  </data>
  <data name="StringId.FilterGroupNotAnd" xml:space="preserve">
    <value>Non et</value>
  </data>
  <data name="StringId.FilterGroupNotOr" xml:space="preserve">
    <value>Non ou</value>
  </data>
  <data name="StringId.FilterGroupOr" xml:space="preserve">
    <value>Ou</value>
  </data>
  <data name="StringId.FilterClauseAnyOf" xml:space="preserve">
    <value>Parmi</value>
  </data>
  <data name="StringId.FilterClauseBeginsWith" xml:space="preserve">
    <value>Commence par</value>
  </data>
  <data name="StringId.FilterClauseBetween" xml:space="preserve">
    <value>Est entre</value>
  </data>
  <data name="StringId.FilterClauseBetweenAnd" xml:space="preserve">
    <value>et</value>
  </data>
  <data name="StringId.FilterClauseContains" xml:space="preserve">
    <value>Contient</value>
  </data>
  <data name="StringId.FilterClauseEndsWith" xml:space="preserve">
    <value>Finit par</value>
  </data>
  <data name="StringId.FilterClauseEquals" xml:space="preserve">
    <value>Est égal à</value>
  </data>
  <data name="StringId.FilterClauseGreater" xml:space="preserve">
    <value>Est plus grand que</value>
  </data>
  <data name="StringId.FilterClauseGreaterOrEqual" xml:space="preserve">
    <value>Est plus grand ou égal à</value>
  </data>
  <data name="StringId.FilterClauseIsNotNull" xml:space="preserve">
    <value>N'est pas vide</value>
  </data>
  <data name="StringId.FilterClauseIsNull" xml:space="preserve">
    <value>Est vide</value>
  </data>
  <data name="StringId.FilterClauseLess" xml:space="preserve">
    <value>Est plus petit que</value>
  </data>
  <data name="StringId.FilterClauseLessOrEqual" xml:space="preserve">
    <value>Est plus petit ou égal à</value>
  </data>
  <data name="StringId.FilterClauseLike" xml:space="preserve">
    <value>Est comme</value>
  </data>
  <data name="StringId.FilterClauseNoneOf" xml:space="preserve">
    <value>N'est pas parmi</value>
  </data>
  <data name="StringId.FilterClauseNotBetween" xml:space="preserve">
    <value>N'est pas entre</value>
  </data>
  <data name="StringId.FilterClauseDoesNotContain" xml:space="preserve">
    <value>Ne contient pas</value>
  </data>
  <data name="StringId.FilterClauseDoesNotEqual" xml:space="preserve">
    <value>N'est pas égal à</value>
  </data>
  <data name="StringId.FilterClauseNotLike" xml:space="preserve">
    <value>N'est pas comme</value>
  </data>
  <data name="StringId.FilterEmptyEnter" xml:space="preserve">
    <value>&lt;Veuillez entrer une valeur&gt;</value>
  </data>
  <data name="StringId.FilterEmptyValue" xml:space="preserve">
    <value>&lt;Vide&gt;</value>
  </data>
  <data name="StringId.FilterMenuConditionAdd" xml:space="preserve">
    <value>Ajouter une condition</value>
  </data>
  <data name="StringId.FilterMenuGroupAdd" xml:space="preserve">
    <value>Ajouter un groupe</value>
  </data>
  <data name="StringId.FilterMenuClearAll" xml:space="preserve">
    <value>Tout effacer</value>
  </data>
  <data name="StringId.FilterMenuRowRemove" xml:space="preserve">
    <value>Retirer un groupe</value>
  </data>
  <data name="StringId.FilterToolTipNodeAdd" xml:space="preserve">
    <value>Ajouter une nouvelle condition à ce groupe</value>
  </data>
  <data name="StringId.FilterToolTipNodeRemove" xml:space="preserve">
    <value>Retire cette condition</value>
  </data>
  <data name="StringId.FilterToolTipNodeAction" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="StringId.FilterToolTipValueType" xml:space="preserve">
    <value>Comparer à une valeur / à la valeur d'un autre champ</value>
  </data>
  <data name="StringId.FilterToolTipElementAdd" xml:space="preserve">
    <value>Ajouter un nouvel élément à la liste</value>
  </data>
  <data name="StringId.FilterToolTipKeysAdd" xml:space="preserve">
    <value>(Utilisez la touche Insertion ou +)</value>
  </data>
  <data name="StringId.FilterToolTipKeysRemove" xml:space="preserve">
    <value>(Utilisez la touche Suppression ou -)</value>
  </data>
  <data name="StringId.ContainerAccessibleEditName" xml:space="preserve">
    <value>Contrôle d'édition</value>
  </data>
  <data name="StringId.FilterCriteriaToStringGroupOperatorAnd" xml:space="preserve">
    <value>Et</value>
  </data>
  <data name="StringId.FilterCriteriaToStringGroupOperatorOr" xml:space="preserve">
    <value>Ou</value>
  </data>
  <data name="StringId.FilterCriteriaToStringUnaryOperatorIsNull" xml:space="preserve">
    <value>Est nul</value>
  </data>
  <data name="StringId.FilterCriteriaToStringUnaryOperatorNot" xml:space="preserve">
    <value>Pas</value>
  </data>
  <data name="StringId.FilterCriteriaToStringBinaryOperatorLike" xml:space="preserve">
    <value>Comme</value>
  </data>
  <data name="StringId.FilterCriteriaToStringBetween" xml:space="preserve">
    <value>Entre</value>
  </data>
  <data name="StringId.FilterCriteriaToStringIn" xml:space="preserve">
    <value>Dans</value>
  </data>
  <data name="StringId.FilterCriteriaToStringIsNotNull" xml:space="preserve">
    <value>N'est pas nul</value>
  </data>
  <data name="StringId.FilterCriteriaToStringNotLike" xml:space="preserve">
    <value>Pas comme</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionIif" xml:space="preserve">
    <value>Si</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionIsNull" xml:space="preserve">
    <value>Est nul</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionLen" xml:space="preserve">
    <value>Long.</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionLower" xml:space="preserve">
    <value>Miniscule</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionNone" xml:space="preserve">
    <value>Aucun</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionSubstring" xml:space="preserve">
    <value>Sous-chaîne</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionTrim" xml:space="preserve">
    <value>Élaguer</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionUpper" xml:space="preserve">
    <value>Majuscule</value>
  </data>
  <data name="StringId.FilterCriteriaToStringFunctionCustom" xml:space="preserve">
    <value>Personnalisé</value>
  </data>
  <data name="StringId.Apply" xml:space="preserve">
    <value>Appliquer</value>
  </data>
  <data name="StringId.PreviewPanelText" xml:space="preserve">
    <value>Prévisualisation :</value>
  </data>
  <data name="StringId.TransparentBackColorNotSupported" xml:space="preserve">
    <value>Ce contrôle ne prend pas en charge la gestion de la couleur de fond transparente</value>
  </data>
  <data name="StringId.FilterOutlookDateText" xml:space="preserve">
    <value>Tout afficher|Une date particulière :|Les années suivantes|Plus tard cette année|Plus tard ce mois-ci|La semaine prochaine|Plus tard cette semaine|Demain|Aujourd'hui|Hier|Plus tôt cette semaine|La semaine dernière|Plus tôt ce mois-ci|Plus tôt cette année|Les années précédentes</value>
  </data>
</root>