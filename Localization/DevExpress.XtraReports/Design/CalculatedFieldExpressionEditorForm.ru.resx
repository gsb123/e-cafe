<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonOK.Text" xml:space="preserve">
    <value>ОК</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Отмена</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Редактор выражений</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Константы</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Поля</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Функции</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Параметры</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Операторы</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Удаляет все предшествующие и окончательные пробелы.</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Возвращает число символов в строке, или число байт, требуемых для сохранения значения.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring(String, StartPosition, Length) Возвращает подстроку, начиная с позиции StartPosition и длиной Length символов.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif(Expression, TruePart, FalsePart) Если выражение истина, исполняет TruePart, иначе исполняет выражение FalsePart.</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>Возвращает Истина, если значение NULL.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Возвращает строку в верхнем регистре.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Возвращает строку в нижнем регистре.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Возвращает строковое значение, содержащее сцепление всех строк с первой.</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>Тип этого поля:</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>Тип этого параметра:</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Прибавляет значение числового выражения к другому, или соединяет две строки.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Находит разность между двумя числами.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Перемножает значения двух выражений.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Делит первый операнд на второй.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Возвращает остаток от деления (по модулю) одного арифметического выражения на другое.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Сравнивает  каждый бит первого операнда с соответствующим битом второго. Если хотябы один бит установлен в 1, то результирующий тоже 1, иначе - 0.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Побитовое логическое "И" между двумя целыми значениями.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Выполняет исключающее "ИЛИ" для двух логических выражений, или побитовое исключение для целых значений.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Возвращает истину, если оба операнда равны; иначе - ложь.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Возвращает Истина, если оператор не равен некоторому значению. Иначе возвращает Ложь.</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Оператор "Меньше". Используется для сравнения выражений.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Оператор "Меньше или равно". Используется для сравнения выражений.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Оператор "Больше или равно". Используется для сравнения выражений.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Оператор "Больше". Используется для сравнения выражений.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>Проверяет, находится ли значение среди заданных.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Сравнивает строку с шаблоном. Если строка содержит шаблон, возвращает Истина. Если строка не содекржит шаблон, возвращает Ложь. Если оба - и строка и шаблон -имеют нулевую дляну, возвращает Истина.</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Проверяет диапазон.  Возвращает Истину, если значение больше или равно первого операнда и меньше или равно второго операнда.</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Выполняет логическое И для двух выражений.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Вычисляет логическое ИЛИ двух логических выражений</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Возвращает логическое отрицание выражения.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Представляет логическое значение Истина.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Представляет логическое значение Ложь.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Возвращает нулевую ссылку, которая не указывает ни на какой объект.</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring(String, StartPosition) Возвращает подстроку, начиная с позиции StartPosition.</value>
  </data>
</root>