<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral" />
  <data name="buttonOK.Location" type="System.Drawing.Point, System.Drawing">
    <value>389, 385</value>
  </data>
  <data name="buttonOK.Size" type="System.Drawing.Size, System.Drawing">
    <value>75, 24</value>
  </data>
  <assembly alias="mscorlib" name="mscorlib, Version=2.0.0.0, Culture=neutral" />
  <data name="buttonOK.TabIndex" type="System.Int32, mscorlib">
    <value>0</value>
  </data>
  <data name="buttonOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="&gt;&gt;buttonOK.Name" xml:space="preserve">
    <value>buttonOK</value>
  </data>
  <data name="&gt;&gt;buttonOK.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;buttonOK.ZOrder" xml:space="preserve">
    <value>24</value>
  </data>
  <data name="buttonCancel.Location" type="System.Drawing.Point, System.Drawing">
    <value>478, 385</value>
  </data>
  <data name="buttonCancel.Size" type="System.Drawing.Size, System.Drawing">
    <value>75, 24</value>
  </data>
  <data name="buttonCancel.TabIndex" type="System.Int32, mscorlib">
    <value>1</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="&gt;&gt;buttonCancel.Name" xml:space="preserve">
    <value>buttonCancel</value>
  </data>
  <data name="&gt;&gt;buttonCancel.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;buttonCancel.ZOrder" xml:space="preserve">
    <value>23</value>
  </data>
  <data name="expressionEdit.Location" type="System.Drawing.Point, System.Drawing">
    <value>8, 8</value>
  </data>
  <data name="expressionEdit.Size" type="System.Drawing.Size, System.Drawing">
    <value>550, 116</value>
  </data>
  <data name="expressionEdit.TabIndex" type="System.Int32, mscorlib">
    <value>2</value>
  </data>
  <data name="&gt;&gt;expressionEdit.Name" xml:space="preserve">
    <value>expressionEdit</value>
  </data>
  <data name="&gt;&gt;expressionEdit.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;expressionEdit.ZOrder" xml:space="preserve">
    <value>21</value>
  </data>
  <data name="labelControl1.Location" type="System.Drawing.Point, System.Drawing">
    <value>235, 134</value>
  </data>
  <data name="labelControl1.Size" type="System.Drawing.Size, System.Drawing">
    <value>2, 24</value>
  </data>
  <data name="labelControl1.TabIndex" type="System.Int32, mscorlib">
    <value>7</value>
  </data>
  <data name="&gt;&gt;labelControl1.Name" xml:space="preserve">
    <value>labelControl1</value>
  </data>
  <data name="&gt;&gt;labelControl1.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl1.ZOrder" xml:space="preserve">
    <value>16</value>
  </data>
  <data name="labelControl2.Location" type="System.Drawing.Point, System.Drawing">
    <value>444, 134</value>
  </data>
  <data name="labelControl2.Size" type="System.Drawing.Size, System.Drawing">
    <value>2, 24</value>
  </data>
  <data name="labelControl2.TabIndex" type="System.Int32, mscorlib">
    <value>14</value>
  </data>
  <data name="&gt;&gt;labelControl2.Name" xml:space="preserve">
    <value>labelControl2</value>
  </data>
  <data name="&gt;&gt;labelControl2.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl2.ZOrder" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="labelControl3.Location" type="System.Drawing.Point, System.Drawing">
    <value>0, 364</value>
  </data>
  <data name="labelControl3.Size" type="System.Drawing.Size, System.Drawing">
    <value>566, 10</value>
  </data>
  <data name="labelControl3.TabIndex" type="System.Int32, mscorlib">
    <value>18</value>
  </data>
  <data name="&gt;&gt;labelControl3.Name" xml:space="preserve">
    <value>labelControl3</value>
  </data>
  <data name="&gt;&gt;labelControl3.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl3.ZOrder" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="descriptionControl.Location" type="System.Drawing.Point, System.Drawing">
    <value>380, 168</value>
  </data>
  <data name="descriptionControl.Size" type="System.Drawing.Size, System.Drawing">
    <value>178, 194</value>
  </data>
  <data name="descriptionControl.TabIndex" type="System.Int32, mscorlib">
    <value>19</value>
  </data>
  <data name="&gt;&gt;descriptionControl.Name" xml:space="preserve">
    <value>descriptionControl</value>
  </data>
  <data name="&gt;&gt;descriptionControl.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;descriptionControl.ZOrder" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="listOfInputTypes.Location" type="System.Drawing.Point, System.Drawing">
    <value>8, 168</value>
  </data>
  <data name="listOfInputTypes.Size" type="System.Drawing.Size, System.Drawing">
    <value>178, 194</value>
  </data>
  <data name="listOfInputTypes.TabIndex" type="System.Int32, mscorlib">
    <value>20</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.Name" xml:space="preserve">
    <value>listOfInputTypes</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.ZOrder" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="listOfInputParameters.Location" type="System.Drawing.Point, System.Drawing">
    <value>194, 168</value>
  </data>
  <data name="listOfInputParameters.Size" type="System.Drawing.Size, System.Drawing">
    <value>178, 194</value>
  </data>
  <data name="listOfInputParameters.TabIndex" type="System.Int32, mscorlib">
    <value>21</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.Name" xml:space="preserve">
    <value>listOfInputParameters</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.ZOrder" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="labelControl4.Location" type="System.Drawing.Point, System.Drawing">
    <value>186, 134</value>
  </data>
  <data name="labelControl4.Size" type="System.Drawing.Size, System.Drawing">
    <value>2, 24</value>
  </data>
  <data name="labelControl4.TabIndex" type="System.Int32, mscorlib">
    <value>22</value>
  </data>
  <data name="&gt;&gt;labelControl4.Name" xml:space="preserve">
    <value>labelControl4</value>
  </data>
  <data name="&gt;&gt;labelControl4.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl4.ZOrder" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="layoutItemButton15.Location" type="System.Drawing.Point, System.Drawing">
    <value>197, 132</value>
  </data>
  <data name="layoutItemButton15.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton15.TabIndex" type="System.Int32, mscorlib">
    <value>23</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.Name" xml:space="preserve">
    <value>layoutItemButton15</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.ZOrder" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="layoutItemButton12.Location" type="System.Drawing.Point, System.Drawing">
    <value>455, 132</value>
  </data>
  <data name="layoutItemButton12.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton12.TabIndex" type="System.Int32, mscorlib">
    <value>17</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.Name" xml:space="preserve">
    <value>layoutItemButton12</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.ZOrder" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="layoutItemButton13.Location" type="System.Drawing.Point, System.Drawing">
    <value>487, 132</value>
  </data>
  <data name="layoutItemButton13.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton13.TabIndex" type="System.Int32, mscorlib">
    <value>16</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.Name" xml:space="preserve">
    <value>layoutItemButton13</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.ZOrder" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="layoutItemButton14.Location" type="System.Drawing.Point, System.Drawing">
    <value>519, 132</value>
  </data>
  <data name="layoutItemButton14.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton14.TabIndex" type="System.Int32, mscorlib">
    <value>15</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.Name" xml:space="preserve">
    <value>layoutItemButton14</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.ZOrder" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="layoutItemButton11.Location" type="System.Drawing.Point, System.Drawing">
    <value>406, 132</value>
  </data>
  <data name="layoutItemButton11.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton11.TabIndex" type="System.Int32, mscorlib">
    <value>13</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.Name" xml:space="preserve">
    <value>layoutItemButton11</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.ZOrder" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="layoutItemButton10.Location" type="System.Drawing.Point, System.Drawing">
    <value>374, 132</value>
  </data>
  <data name="layoutItemButton10.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton10.TabIndex" type="System.Int32, mscorlib">
    <value>12</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.Name" xml:space="preserve">
    <value>layoutItemButton10</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.ZOrder" xml:space="preserve">
    <value>11</value>
  </data>
  <data name="layoutItemButton9.Location" type="System.Drawing.Point, System.Drawing">
    <value>342, 132</value>
  </data>
  <data name="layoutItemButton9.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton9.TabIndex" type="System.Int32, mscorlib">
    <value>11</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.Name" xml:space="preserve">
    <value>layoutItemButton9</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.ZOrder" xml:space="preserve">
    <value>12</value>
  </data>
  <data name="layoutItemButton8.Location" type="System.Drawing.Point, System.Drawing">
    <value>310, 132</value>
  </data>
  <data name="layoutItemButton8.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton8.TabIndex" type="System.Int32, mscorlib">
    <value>10</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.Name" xml:space="preserve">
    <value>layoutItemButton8</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.ZOrder" xml:space="preserve">
    <value>13</value>
  </data>
  <data name="layoutItemButton7.Location" type="System.Drawing.Point, System.Drawing">
    <value>278, 132</value>
  </data>
  <data name="layoutItemButton7.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton7.TabIndex" type="System.Int32, mscorlib">
    <value>9</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.Name" xml:space="preserve">
    <value>layoutItemButton7</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.ZOrder" xml:space="preserve">
    <value>14</value>
  </data>
  <data name="layoutItemButton6.Location" type="System.Drawing.Point, System.Drawing">
    <value>246, 132</value>
  </data>
  <data name="layoutItemButton6.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton6.TabIndex" type="System.Int32, mscorlib">
    <value>8</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.Name" xml:space="preserve">
    <value>layoutItemButton6</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.ZOrder" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="layoutItemButton5.Location" type="System.Drawing.Point, System.Drawing">
    <value>148, 132</value>
  </data>
  <data name="layoutItemButton5.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton5.TabIndex" type="System.Int32, mscorlib">
    <value>6</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.Name" xml:space="preserve">
    <value>layoutItemButton5</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.ZOrder" xml:space="preserve">
    <value>17</value>
  </data>
  <data name="layoutItemButton4.Location" type="System.Drawing.Point, System.Drawing">
    <value>116, 132</value>
  </data>
  <data name="layoutItemButton4.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton4.TabIndex" type="System.Int32, mscorlib">
    <value>5</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.Name" xml:space="preserve">
    <value>layoutItemButton4</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.ZOrder" xml:space="preserve">
    <value>18</value>
  </data>
  <data name="layoutItemButton3.Location" type="System.Drawing.Point, System.Drawing">
    <value>84, 132</value>
  </data>
  <data name="layoutItemButton3.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton3.TabIndex" type="System.Int32, mscorlib">
    <value>4</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.Name" xml:space="preserve">
    <value>layoutItemButton3</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.ZOrder" xml:space="preserve">
    <value>19</value>
  </data>
  <data name="layoutItemButton2.Location" type="System.Drawing.Point, System.Drawing">
    <value>52, 132</value>
  </data>
  <data name="layoutItemButton2.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="layoutItemButton2.TabIndex" type="System.Int32, mscorlib">
    <value>3</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.Name" xml:space="preserve">
    <value>layoutItemButton2</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.ZOrder" xml:space="preserve">
    <value>20</value>
  </data>
  <data name="plusItemButton.Location" type="System.Drawing.Point, System.Drawing">
    <value>20, 132</value>
  </data>
  <data name="plusItemButton.Size" type="System.Drawing.Size, System.Drawing">
    <value>28, 28</value>
  </data>
  <data name="plusItemButton.TabIndex" type="System.Int32, mscorlib">
    <value>0</value>
  </data>
  <data name="&gt;&gt;plusItemButton.Name" xml:space="preserve">
    <value>plusItemButton</value>
  </data>
  <data name="&gt;&gt;plusItemButton.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;plusItemButton.ZOrder" xml:space="preserve">
    <value>22</value>
  </data>
  <data name="$this.Localizable" type="System.Boolean, mscorlib">
    <value>True</value>
  </data>
  <data name="$this.ClientSize" type="System.Drawing.Size, System.Drawing">
    <value>566, 421</value>
  </data>
  <data name="$this.MinimumSize" type="System.Drawing.Size, System.Drawing">
    <value>566, 421</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Editor de Expressão</value>
  </data>
  <data name="&gt;&gt;$this.Name" xml:space="preserve">
    <value>CalculatedFieldExpressionEditorForm</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Constantes</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Campos</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funções</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parâmetros</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operadores</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Remove todas as ocorrências do conjunto de caracteres especificado, desde o começo até o final da instância.</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Retorna um inteiro contendo ou o número de caracteres in um string, ou o número nominal de bytes necessários para armazenar a variável.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring(", PosiçãoFinal, NúmeroDeCaracteres) Retorna um substring na posição especificada dentro do objeto String, a partir da PosiçãoInicial até a posição especificada pelo parâmetro NúmeroDeCaracteres.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif(Expressão, ParteVerdadeira, ParteFalsa) Returna de dois objetos, dependendo da avaliação de uma expressão. Parametros: Expressão - Booleana. A expressãoo a ser avaliada. ParteVerdadeira - Objeto.  Retornado se a Expressão for avaliada para verdadeiro. FalsePart - Objeto. Retornado se a Expressão for avaliada para falso.</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>Determnina se o valor de uma propriedade particular é NULAL.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Retorna a expressão de caracteres especificada em letras maiúsculas.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Retorna a expressão de caracteres especificada em letras minúsculas.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Retorna um string contendo a concatenação do string atual com quaisquer strings fornecidos. Argumentos: string1, ... , stringN. Objetos opcionais tipo string ou literais para concatenar no final do string original.</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>O tipo deste campo és: </value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>O tipo deste parâmetro é:</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Adiciona o valor de uma expressão numérica a outra, ou concatena dois strings.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Calcula a direferença entre dois números.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Multiplica o valor das duas expressões.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Faz com que o primeiro operando seja dividido pelo segundo.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Retorna o resto (módulo) obtido pela divisão de uma expressão numérica por outra.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Compara cada bit do primeiro operando com o bit correspondente do segundo operando.Se um dos bits for 1, o bit correspondente do resultado será 1. Caso contrário, o bit correspondente será 0.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Executa um operação lógica 'E' bit a bit entre dois números inteiros.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Executa uma operação lógica de exclusão entre duas expressões booleanas,ou a exclusão bit a bit de duas expressões numéricas.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Returna verdadeiro se ambos operandos tiverem o mesmo valor; caso contrário, retorna falso.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Retorna verdadeiro se os operandos não tiverem o mesmo valor; caso contrário, retorna falso.</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Operador Menor Que. Usado para comparar expressões.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Operador Menor Que ou Igual. Usado para comparar expressões.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Operador Maior Que ou Igual. Usado para comparar expressões.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Operador Maior Que. Usado para comparar expressões.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>Testa a existência de uma propriedade em um objeto.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Compara um string com um padrão. Se o valor no string satisfizer o padrão, o resultado será verdadeiro; caso contrário será falso. Se ambos o string e o padrão forem vazios, o resultado será verdadeiro.</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Especifica uma faixa para testar. Returna verdadeiro se o valor da expressão_de_test for maior ou igual ao valor expressão_inicial e menor ou igual ao valor expressão_final.</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Executa uma conjunção lógica de duas expressões.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Executa a operação lógica 'OU' (disjunção) entre duas expressões booleanas.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Executa a negação lógica da expressão.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Representa o valor booleano 'Verdadeiro'.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Representa o valor booleano falso.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Representa uma referência nula, que não se refere a objeto algum. Assim, é representada pelo símbolo "?".</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring(", PosiçãoInicial) Retorna um substring na posição especificada dentro do objeto String, a partir da PosiçãoInicial até o final do string.</value>
  </data>
</root>