//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace e_Cafe {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ECAFEDataSetCIKK")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ECAFEDataSetCIKK : global::System.Data.DataSet {
        
        private CIKKDataTable tableCIKK;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ECAFEDataSetCIKK() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ECAFEDataSetCIKK(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CIKK"] != null)) {
                    base.Tables.Add(new CIKKDataTable(ds.Tables["CIKK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CIKKDataTable CIKK {
            get {
                return this.tableCIKK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ECAFEDataSetCIKK cln = ((ECAFEDataSetCIKK)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CIKK"] != null)) {
                    base.Tables.Add(new CIKKDataTable(ds.Tables["CIKK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCIKK = ((CIKKDataTable)(base.Tables["CIKK"]));
            if ((initTable == true)) {
                if ((this.tableCIKK != null)) {
                    this.tableCIKK.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ECAFEDataSetCIKK";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ECAFEDataSetCIKK.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCIKK = new CIKKDataTable();
            base.Tables.Add(this.tableCIKK);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCIKK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ECAFEDataSetCIKK ds = new ECAFEDataSetCIKK();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CIKKRowChangeEventHandler(object sender, CIKKRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CIKKDataTable : global::System.Data.TypedTableBase<CIKKRow> {
            
            private global::System.Data.DataColumn columnCIKK_ID;
            
            private global::System.Data.DataColumn columnMEGNEVEZES;
            
            private global::System.Data.DataColumn columnCIKK_TIPUS;
            
            private global::System.Data.DataColumn columnCIKKCSOPORT_ID;
            
            private global::System.Data.DataColumn columnERTEKESITES_TIPUSA;
            
            private global::System.Data.DataColumn columnMEGYS_ID;
            
            private global::System.Data.DataColumn columnOTHER_FILTER_ID;
            
            private global::System.Data.DataColumn columnDEFAULT_RAKTAR;
            
            private global::System.Data.DataColumn columnSZJ_SZAM;
            
            private global::System.Data.DataColumn columnCIKKSZAM;
            
            private global::System.Data.DataColumn columnEAN_KOD;
            
            private global::System.Data.DataColumn columnMINIMUM_KESZLET;
            
            private global::System.Data.DataColumn columnOPTIMALIS_KESZLET;
            
            private global::System.Data.DataColumn columnELADASI_AR;
            
            private global::System.Data.DataColumn columnHELYETTES_TERMEK;
            
            private global::System.Data.DataColumn columnMAX_KEDVEZMENY_SZ;
            
            private global::System.Data.DataColumn columnMAX_KEDVEZM_FT;
            
            private global::System.Data.DataColumn columnMEGJEGYZES;
            
            private global::System.Data.DataColumn columnAKTIV;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKDataTable() {
                this.TableName = "CIKK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CIKKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CIKKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIKK_IDColumn {
                get {
                    return this.columnCIKK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEGNEVEZESColumn {
                get {
                    return this.columnMEGNEVEZES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIKK_TIPUSColumn {
                get {
                    return this.columnCIKK_TIPUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIKKCSOPORT_IDColumn {
                get {
                    return this.columnCIKKCSOPORT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ERTEKESITES_TIPUSAColumn {
                get {
                    return this.columnERTEKESITES_TIPUSA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEGYS_IDColumn {
                get {
                    return this.columnMEGYS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTHER_FILTER_IDColumn {
                get {
                    return this.columnOTHER_FILTER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_RAKTARColumn {
                get {
                    return this.columnDEFAULT_RAKTAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SZJ_SZAMColumn {
                get {
                    return this.columnSZJ_SZAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIKKSZAMColumn {
                get {
                    return this.columnCIKKSZAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EAN_KODColumn {
                get {
                    return this.columnEAN_KOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MINIMUM_KESZLETColumn {
                get {
                    return this.columnMINIMUM_KESZLET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPTIMALIS_KESZLETColumn {
                get {
                    return this.columnOPTIMALIS_KESZLET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ELADASI_ARColumn {
                get {
                    return this.columnELADASI_AR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HELYETTES_TERMEKColumn {
                get {
                    return this.columnHELYETTES_TERMEK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAX_KEDVEZMENY_SZColumn {
                get {
                    return this.columnMAX_KEDVEZMENY_SZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAX_KEDVEZM_FTColumn {
                get {
                    return this.columnMAX_KEDVEZM_FT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEGJEGYZESColumn {
                get {
                    return this.columnMEGJEGYZES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AKTIVColumn {
                get {
                    return this.columnAKTIV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRow this[int index] {
                get {
                    return ((CIKKRow)(this.Rows[index]));
                }
            }
            
            public event CIKKRowChangeEventHandler CIKKRowChanging;
            
            public event CIKKRowChangeEventHandler CIKKRowChanged;
            
            public event CIKKRowChangeEventHandler CIKKRowDeleting;
            
            public event CIKKRowChangeEventHandler CIKKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCIKKRow(CIKKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRow AddCIKKRow(
                        string MEGNEVEZES, 
                        int CIKK_TIPUS, 
                        int CIKKCSOPORT_ID, 
                        string ERTEKESITES_TIPUSA, 
                        string MEGYS_ID, 
                        int OTHER_FILTER_ID, 
                        int DEFAULT_RAKTAR, 
                        string SZJ_SZAM, 
                        string CIKKSZAM, 
                        string EAN_KOD, 
                        double MINIMUM_KESZLET, 
                        double OPTIMALIS_KESZLET, 
                        double ELADASI_AR, 
                        int HELYETTES_TERMEK, 
                        double MAX_KEDVEZMENY_SZ, 
                        double MAX_KEDVEZM_FT, 
                        string MEGJEGYZES, 
                        int AKTIV) {
                CIKKRow rowCIKKRow = ((CIKKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MEGNEVEZES,
                        CIKK_TIPUS,
                        CIKKCSOPORT_ID,
                        ERTEKESITES_TIPUSA,
                        MEGYS_ID,
                        OTHER_FILTER_ID,
                        DEFAULT_RAKTAR,
                        SZJ_SZAM,
                        CIKKSZAM,
                        EAN_KOD,
                        MINIMUM_KESZLET,
                        OPTIMALIS_KESZLET,
                        ELADASI_AR,
                        HELYETTES_TERMEK,
                        MAX_KEDVEZMENY_SZ,
                        MAX_KEDVEZM_FT,
                        MEGJEGYZES,
                        AKTIV};
                rowCIKKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCIKKRow);
                return rowCIKKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRow FindByCIKK_ID(int CIKK_ID) {
                return ((CIKKRow)(this.Rows.Find(new object[] {
                            CIKK_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CIKKDataTable cln = ((CIKKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CIKKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCIKK_ID = base.Columns["CIKK_ID"];
                this.columnMEGNEVEZES = base.Columns["MEGNEVEZES"];
                this.columnCIKK_TIPUS = base.Columns["CIKK_TIPUS"];
                this.columnCIKKCSOPORT_ID = base.Columns["CIKKCSOPORT_ID"];
                this.columnERTEKESITES_TIPUSA = base.Columns["ERTEKESITES_TIPUSA"];
                this.columnMEGYS_ID = base.Columns["MEGYS_ID"];
                this.columnOTHER_FILTER_ID = base.Columns["OTHER_FILTER_ID"];
                this.columnDEFAULT_RAKTAR = base.Columns["DEFAULT_RAKTAR"];
                this.columnSZJ_SZAM = base.Columns["SZJ_SZAM"];
                this.columnCIKKSZAM = base.Columns["CIKKSZAM"];
                this.columnEAN_KOD = base.Columns["EAN_KOD"];
                this.columnMINIMUM_KESZLET = base.Columns["MINIMUM_KESZLET"];
                this.columnOPTIMALIS_KESZLET = base.Columns["OPTIMALIS_KESZLET"];
                this.columnELADASI_AR = base.Columns["ELADASI_AR"];
                this.columnHELYETTES_TERMEK = base.Columns["HELYETTES_TERMEK"];
                this.columnMAX_KEDVEZMENY_SZ = base.Columns["MAX_KEDVEZMENY_SZ"];
                this.columnMAX_KEDVEZM_FT = base.Columns["MAX_KEDVEZM_FT"];
                this.columnMEGJEGYZES = base.Columns["MEGJEGYZES"];
                this.columnAKTIV = base.Columns["AKTIV"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCIKK_ID = new global::System.Data.DataColumn("CIKK_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIKK_ID);
                this.columnMEGNEVEZES = new global::System.Data.DataColumn("MEGNEVEZES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEGNEVEZES);
                this.columnCIKK_TIPUS = new global::System.Data.DataColumn("CIKK_TIPUS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIKK_TIPUS);
                this.columnCIKKCSOPORT_ID = new global::System.Data.DataColumn("CIKKCSOPORT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIKKCSOPORT_ID);
                this.columnERTEKESITES_TIPUSA = new global::System.Data.DataColumn("ERTEKESITES_TIPUSA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnERTEKESITES_TIPUSA);
                this.columnMEGYS_ID = new global::System.Data.DataColumn("MEGYS_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEGYS_ID);
                this.columnOTHER_FILTER_ID = new global::System.Data.DataColumn("OTHER_FILTER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHER_FILTER_ID);
                this.columnDEFAULT_RAKTAR = new global::System.Data.DataColumn("DEFAULT_RAKTAR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_RAKTAR);
                this.columnSZJ_SZAM = new global::System.Data.DataColumn("SZJ_SZAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSZJ_SZAM);
                this.columnCIKKSZAM = new global::System.Data.DataColumn("CIKKSZAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIKKSZAM);
                this.columnEAN_KOD = new global::System.Data.DataColumn("EAN_KOD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEAN_KOD);
                this.columnMINIMUM_KESZLET = new global::System.Data.DataColumn("MINIMUM_KESZLET", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMINIMUM_KESZLET);
                this.columnOPTIMALIS_KESZLET = new global::System.Data.DataColumn("OPTIMALIS_KESZLET", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPTIMALIS_KESZLET);
                this.columnELADASI_AR = new global::System.Data.DataColumn("ELADASI_AR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnELADASI_AR);
                this.columnHELYETTES_TERMEK = new global::System.Data.DataColumn("HELYETTES_TERMEK", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHELYETTES_TERMEK);
                this.columnMAX_KEDVEZMENY_SZ = new global::System.Data.DataColumn("MAX_KEDVEZMENY_SZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX_KEDVEZMENY_SZ);
                this.columnMAX_KEDVEZM_FT = new global::System.Data.DataColumn("MAX_KEDVEZM_FT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX_KEDVEZM_FT);
                this.columnMEGJEGYZES = new global::System.Data.DataColumn("MEGJEGYZES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEGJEGYZES);
                this.columnAKTIV = new global::System.Data.DataColumn("AKTIV", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAKTIV);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCIKK_ID}, true));
                this.columnCIKK_ID.AutoIncrement = true;
                this.columnCIKK_ID.AutoIncrementSeed = -1;
                this.columnCIKK_ID.AutoIncrementStep = -1;
                this.columnCIKK_ID.AllowDBNull = false;
                this.columnCIKK_ID.ReadOnly = true;
                this.columnCIKK_ID.Unique = true;
                this.columnMEGNEVEZES.AllowDBNull = false;
                this.columnMEGNEVEZES.MaxLength = 50;
                this.columnCIKK_TIPUS.AllowDBNull = false;
                this.columnCIKKCSOPORT_ID.AllowDBNull = false;
                this.columnERTEKESITES_TIPUSA.MaxLength = 1;
                this.columnMEGYS_ID.MaxLength = 10;
                this.columnSZJ_SZAM.MaxLength = 30;
                this.columnCIKKSZAM.MaxLength = 50;
                this.columnEAN_KOD.MaxLength = 28;
                this.columnMEGJEGYZES.MaxLength = 4000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRow NewCIKKRow() {
                return ((CIKKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CIKKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CIKKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CIKKRowChanged != null)) {
                    this.CIKKRowChanged(this, new CIKKRowChangeEvent(((CIKKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CIKKRowChanging != null)) {
                    this.CIKKRowChanging(this, new CIKKRowChangeEvent(((CIKKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CIKKRowDeleted != null)) {
                    this.CIKKRowDeleted(this, new CIKKRowChangeEvent(((CIKKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CIKKRowDeleting != null)) {
                    this.CIKKRowDeleting(this, new CIKKRowChangeEvent(((CIKKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCIKKRow(CIKKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ECAFEDataSetCIKK ds = new ECAFEDataSetCIKK();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CIKKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CIKKRow : global::System.Data.DataRow {
            
            private CIKKDataTable tableCIKK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CIKKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCIKK = ((CIKKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CIKK_ID {
                get {
                    return ((int)(this[this.tableCIKK.CIKK_IDColumn]));
                }
                set {
                    this[this.tableCIKK.CIKK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEGNEVEZES {
                get {
                    return ((string)(this[this.tableCIKK.MEGNEVEZESColumn]));
                }
                set {
                    this[this.tableCIKK.MEGNEVEZESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CIKK_TIPUS {
                get {
                    return ((int)(this[this.tableCIKK.CIKK_TIPUSColumn]));
                }
                set {
                    this[this.tableCIKK.CIKK_TIPUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CIKKCSOPORT_ID {
                get {
                    return ((int)(this[this.tableCIKK.CIKKCSOPORT_IDColumn]));
                }
                set {
                    this[this.tableCIKK.CIKKCSOPORT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ERTEKESITES_TIPUSA {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.ERTEKESITES_TIPUSAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ERTEKESITES_TIPUSA\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.ERTEKESITES_TIPUSAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEGYS_ID {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.MEGYS_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEGYS_ID\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.MEGYS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OTHER_FILTER_ID {
                get {
                    try {
                        return ((int)(this[this.tableCIKK.OTHER_FILTER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTHER_FILTER_ID\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.OTHER_FILTER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DEFAULT_RAKTAR {
                get {
                    try {
                        return ((int)(this[this.tableCIKK.DEFAULT_RAKTARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_RAKTAR\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.DEFAULT_RAKTARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SZJ_SZAM {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.SZJ_SZAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SZJ_SZAM\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.SZJ_SZAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIKKSZAM {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.CIKKSZAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CIKKSZAM\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.CIKKSZAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EAN_KOD {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.EAN_KODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EAN_KOD\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.EAN_KODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MINIMUM_KESZLET {
                get {
                    try {
                        return ((double)(this[this.tableCIKK.MINIMUM_KESZLETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MINIMUM_KESZLET\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.MINIMUM_KESZLETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OPTIMALIS_KESZLET {
                get {
                    try {
                        return ((double)(this[this.tableCIKK.OPTIMALIS_KESZLETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPTIMALIS_KESZLET\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.OPTIMALIS_KESZLETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ELADASI_AR {
                get {
                    try {
                        return ((double)(this[this.tableCIKK.ELADASI_ARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ELADASI_AR\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.ELADASI_ARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HELYETTES_TERMEK {
                get {
                    try {
                        return ((int)(this[this.tableCIKK.HELYETTES_TERMEKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HELYETTES_TERMEK\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.HELYETTES_TERMEKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MAX_KEDVEZMENY_SZ {
                get {
                    try {
                        return ((double)(this[this.tableCIKK.MAX_KEDVEZMENY_SZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAX_KEDVEZMENY_SZ\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.MAX_KEDVEZMENY_SZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MAX_KEDVEZM_FT {
                get {
                    try {
                        return ((double)(this[this.tableCIKK.MAX_KEDVEZM_FTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAX_KEDVEZM_FT\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.MAX_KEDVEZM_FTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEGJEGYZES {
                get {
                    try {
                        return ((string)(this[this.tableCIKK.MEGJEGYZESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEGJEGYZES\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.MEGJEGYZESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AKTIV {
                get {
                    try {
                        return ((int)(this[this.tableCIKK.AKTIVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AKTIV\' in table \'CIKK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCIKK.AKTIVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsERTEKESITES_TIPUSANull() {
                return this.IsNull(this.tableCIKK.ERTEKESITES_TIPUSAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetERTEKESITES_TIPUSANull() {
                this[this.tableCIKK.ERTEKESITES_TIPUSAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEGYS_IDNull() {
                return this.IsNull(this.tableCIKK.MEGYS_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEGYS_IDNull() {
                this[this.tableCIKK.MEGYS_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTHER_FILTER_IDNull() {
                return this.IsNull(this.tableCIKK.OTHER_FILTER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTHER_FILTER_IDNull() {
                this[this.tableCIKK.OTHER_FILTER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_RAKTARNull() {
                return this.IsNull(this.tableCIKK.DEFAULT_RAKTARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_RAKTARNull() {
                this[this.tableCIKK.DEFAULT_RAKTARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSZJ_SZAMNull() {
                return this.IsNull(this.tableCIKK.SZJ_SZAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSZJ_SZAMNull() {
                this[this.tableCIKK.SZJ_SZAMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIKKSZAMNull() {
                return this.IsNull(this.tableCIKK.CIKKSZAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIKKSZAMNull() {
                this[this.tableCIKK.CIKKSZAMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEAN_KODNull() {
                return this.IsNull(this.tableCIKK.EAN_KODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEAN_KODNull() {
                this[this.tableCIKK.EAN_KODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMINIMUM_KESZLETNull() {
                return this.IsNull(this.tableCIKK.MINIMUM_KESZLETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMINIMUM_KESZLETNull() {
                this[this.tableCIKK.MINIMUM_KESZLETColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPTIMALIS_KESZLETNull() {
                return this.IsNull(this.tableCIKK.OPTIMALIS_KESZLETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPTIMALIS_KESZLETNull() {
                this[this.tableCIKK.OPTIMALIS_KESZLETColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsELADASI_ARNull() {
                return this.IsNull(this.tableCIKK.ELADASI_ARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetELADASI_ARNull() {
                this[this.tableCIKK.ELADASI_ARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHELYETTES_TERMEKNull() {
                return this.IsNull(this.tableCIKK.HELYETTES_TERMEKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHELYETTES_TERMEKNull() {
                this[this.tableCIKK.HELYETTES_TERMEKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAX_KEDVEZMENY_SZNull() {
                return this.IsNull(this.tableCIKK.MAX_KEDVEZMENY_SZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAX_KEDVEZMENY_SZNull() {
                this[this.tableCIKK.MAX_KEDVEZMENY_SZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAX_KEDVEZM_FTNull() {
                return this.IsNull(this.tableCIKK.MAX_KEDVEZM_FTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAX_KEDVEZM_FTNull() {
                this[this.tableCIKK.MAX_KEDVEZM_FTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEGJEGYZESNull() {
                return this.IsNull(this.tableCIKK.MEGJEGYZESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEGJEGYZESNull() {
                this[this.tableCIKK.MEGJEGYZESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAKTIVNull() {
                return this.IsNull(this.tableCIKK.AKTIVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAKTIVNull() {
                this[this.tableCIKK.AKTIVColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CIKKRowChangeEvent : global::System.EventArgs {
            
            private CIKKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRowChangeEvent(CIKKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CIKKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace e_Cafe.ECAFEDataSetCIKKTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CIKKTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CIKKTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CIKK";
            tableMapping.ColumnMappings.Add("CIKK_ID", "CIKK_ID");
            tableMapping.ColumnMappings.Add("MEGNEVEZES", "MEGNEVEZES");
            tableMapping.ColumnMappings.Add("CIKK_TIPUS", "CIKK_TIPUS");
            tableMapping.ColumnMappings.Add("CIKKCSOPORT_ID", "CIKKCSOPORT_ID");
            tableMapping.ColumnMappings.Add("ERTEKESITES_TIPUSA", "ERTEKESITES_TIPUSA");
            tableMapping.ColumnMappings.Add("MEGYS_ID", "MEGYS_ID");
            tableMapping.ColumnMappings.Add("OTHER_FILTER_ID", "OTHER_FILTER_ID");
            tableMapping.ColumnMappings.Add("DEFAULT_RAKTAR", "DEFAULT_RAKTAR");
            tableMapping.ColumnMappings.Add("SZJ_SZAM", "SZJ_SZAM");
            tableMapping.ColumnMappings.Add("CIKKSZAM", "CIKKSZAM");
            tableMapping.ColumnMappings.Add("EAN_KOD", "EAN_KOD");
            tableMapping.ColumnMappings.Add("MINIMUM_KESZLET", "MINIMUM_KESZLET");
            tableMapping.ColumnMappings.Add("OPTIMALIS_KESZLET", "OPTIMALIS_KESZLET");
            tableMapping.ColumnMappings.Add("ELADASI_AR", "ELADASI_AR");
            tableMapping.ColumnMappings.Add("HELYETTES_TERMEK", "HELYETTES_TERMEK");
            tableMapping.ColumnMappings.Add("MAX_KEDVEZMENY_SZ", "MAX_KEDVEZMENY_SZ");
            tableMapping.ColumnMappings.Add("MAX_KEDVEZM_FT", "MAX_KEDVEZM_FT");
            tableMapping.ColumnMappings.Add("MEGJEGYZES", "MEGJEGYZES");
            tableMapping.ColumnMappings.Add("AKTIV", "AKTIV");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CIKK] WHERE (([CIKK_ID] = @Original_CIKK_ID) AND ([MEGNEVEZES] = @Or" +
                "iginal_MEGNEVEZES) AND ([CIKK_TIPUS] = @Original_CIKK_TIPUS) AND ([CIKKCSOPORT_I" +
                "D] = @Original_CIKKCSOPORT_ID) AND ((@IsNull_ERTEKESITES_TIPUSA = 1 AND [ERTEKES" +
                "ITES_TIPUSA] IS NULL) OR ([ERTEKESITES_TIPUSA] = @Original_ERTEKESITES_TIPUSA)) " +
                "AND ((@IsNull_MEGYS_ID = 1 AND [MEGYS_ID] IS NULL) OR ([MEGYS_ID] = @Original_ME" +
                "GYS_ID)) AND ((@IsNull_OTHER_FILTER_ID = 1 AND [OTHER_FILTER_ID] IS NULL) OR ([O" +
                "THER_FILTER_ID] = @Original_OTHER_FILTER_ID)) AND ((@IsNull_DEFAULT_RAKTAR = 1 A" +
                "ND [DEFAULT_RAKTAR] IS NULL) OR ([DEFAULT_RAKTAR] = @Original_DEFAULT_RAKTAR)) A" +
                "ND ((@IsNull_SZJ_SZAM = 1 AND [SZJ_SZAM] IS NULL) OR ([SZJ_SZAM] = @Original_SZJ" +
                "_SZAM)) AND ((@IsNull_CIKKSZAM = 1 AND [CIKKSZAM] IS NULL) OR ([CIKKSZAM] = @Ori" +
                "ginal_CIKKSZAM)) AND ((@IsNull_EAN_KOD = 1 AND [EAN_KOD] IS NULL) OR ([EAN_KOD] " +
                "= @Original_EAN_KOD)) AND ((@IsNull_MINIMUM_KESZLET = 1 AND [MINIMUM_KESZLET] IS" +
                " NULL) OR ([MINIMUM_KESZLET] = @Original_MINIMUM_KESZLET)) AND ((@IsNull_OPTIMAL" +
                "IS_KESZLET = 1 AND [OPTIMALIS_KESZLET] IS NULL) OR ([OPTIMALIS_KESZLET] = @Origi" +
                "nal_OPTIMALIS_KESZLET)) AND ((@IsNull_ELADASI_AR = 1 AND [ELADASI_AR] IS NULL) O" +
                "R ([ELADASI_AR] = @Original_ELADASI_AR)) AND ((@IsNull_HELYETTES_TERMEK = 1 AND " +
                "[HELYETTES_TERMEK] IS NULL) OR ([HELYETTES_TERMEK] = @Original_HELYETTES_TERMEK)" +
                ") AND ((@IsNull_MAX_KEDVEZMENY_SZ = 1 AND [MAX_KEDVEZMENY_SZ] IS NULL) OR ([MAX_" +
                "KEDVEZMENY_SZ] = @Original_MAX_KEDVEZMENY_SZ)) AND ((@IsNull_MAX_KEDVEZM_FT = 1 " +
                "AND [MAX_KEDVEZM_FT] IS NULL) OR ([MAX_KEDVEZM_FT] = @Original_MAX_KEDVEZM_FT)) " +
                "AND ((@IsNull_MEGJEGYZES = 1 AND [MEGJEGYZES] IS NULL) OR ([MEGJEGYZES] = @Origi" +
                "nal_MEGJEGYZES)) AND ((@IsNull_AKTIV = 1 AND [AKTIV] IS NULL) OR ([AKTIV] = @Ori" +
                "ginal_AKTIV)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKK_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGNEVEZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGNEVEZES", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKK_TIPUS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_TIPUS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKKCSOPORT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKCSOPORT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MEGYS_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGYS_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SZJ_SZAM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SZJ_SZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CIKKSZAM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKKSZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EAN_KOD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EAN_KOD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MINIMUM_KESZLET", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MINIMUM_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ELADASI_AR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ELADASI_AR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MEGJEGYZES", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGJEGYZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CIKK] ([MEGNEVEZES], [CIKK_TIPUS], [CIKKCSOPORT_ID], [ERTEKESITES_TIPUSA], [MEGYS_ID], [OTHER_FILTER_ID], [DEFAULT_RAKTAR], [SZJ_SZAM], [CIKKSZAM], [EAN_KOD], [MINIMUM_KESZLET], [OPTIMALIS_KESZLET], [ELADASI_AR], [HELYETTES_TERMEK], [MAX_KEDVEZMENY_SZ], [MAX_KEDVEZM_FT], [MEGJEGYZES], [AKTIV]) VALUES (@MEGNEVEZES, @CIKK_TIPUS, @CIKKCSOPORT_ID, @ERTEKESITES_TIPUSA, @MEGYS_ID, @OTHER_FILTER_ID, @DEFAULT_RAKTAR, @SZJ_SZAM, @CIKKSZAM, @EAN_KOD, @MINIMUM_KESZLET, @OPTIMALIS_KESZLET, @ELADASI_AR, @HELYETTES_TERMEK, @MAX_KEDVEZMENY_SZ, @MAX_KEDVEZM_FT, @MEGJEGYZES, @AKTIV)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGNEVEZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGNEVEZES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKK_TIPUS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_TIPUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKKCSOPORT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKCSOPORT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGYS_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SZJ_SZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKKSZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EAN_KOD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MINIMUM_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ELADASI_AR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGJEGYZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CIKK] SET [MEGNEVEZES] = @MEGNEVEZES, [CIKK_TIPUS] = @CIKK_TIPUS, [CIKKCS" +
                "OPORT_ID] = @CIKKCSOPORT_ID, [ERTEKESITES_TIPUSA] = @ERTEKESITES_TIPUSA, [MEGYS_" +
                "ID] = @MEGYS_ID, [OTHER_FILTER_ID] = @OTHER_FILTER_ID, [DEFAULT_RAKTAR] = @DEFAU" +
                "LT_RAKTAR, [SZJ_SZAM] = @SZJ_SZAM, [CIKKSZAM] = @CIKKSZAM, [EAN_KOD] = @EAN_KOD," +
                " [MINIMUM_KESZLET] = @MINIMUM_KESZLET, [OPTIMALIS_KESZLET] = @OPTIMALIS_KESZLET," +
                " [ELADASI_AR] = @ELADASI_AR, [HELYETTES_TERMEK] = @HELYETTES_TERMEK, [MAX_KEDVEZ" +
                "MENY_SZ] = @MAX_KEDVEZMENY_SZ, [MAX_KEDVEZM_FT] = @MAX_KEDVEZM_FT, [MEGJEGYZES] " +
                "= @MEGJEGYZES, [AKTIV] = @AKTIV WHERE (([CIKK_ID] = @Original_CIKK_ID) AND ([MEG" +
                "NEVEZES] = @Original_MEGNEVEZES) AND ([CIKK_TIPUS] = @Original_CIKK_TIPUS) AND (" +
                "[CIKKCSOPORT_ID] = @Original_CIKKCSOPORT_ID) AND ((@IsNull_ERTEKESITES_TIPUSA = " +
                "1 AND [ERTEKESITES_TIPUSA] IS NULL) OR ([ERTEKESITES_TIPUSA] = @Original_ERTEKES" +
                "ITES_TIPUSA)) AND ((@IsNull_MEGYS_ID = 1 AND [MEGYS_ID] IS NULL) OR ([MEGYS_ID] " +
                "= @Original_MEGYS_ID)) AND ((@IsNull_OTHER_FILTER_ID = 1 AND [OTHER_FILTER_ID] I" +
                "S NULL) OR ([OTHER_FILTER_ID] = @Original_OTHER_FILTER_ID)) AND ((@IsNull_DEFAUL" +
                "T_RAKTAR = 1 AND [DEFAULT_RAKTAR] IS NULL) OR ([DEFAULT_RAKTAR] = @Original_DEFA" +
                "ULT_RAKTAR)) AND ((@IsNull_SZJ_SZAM = 1 AND [SZJ_SZAM] IS NULL) OR ([SZJ_SZAM] =" +
                " @Original_SZJ_SZAM)) AND ((@IsNull_CIKKSZAM = 1 AND [CIKKSZAM] IS NULL) OR ([CI" +
                "KKSZAM] = @Original_CIKKSZAM)) AND ((@IsNull_EAN_KOD = 1 AND [EAN_KOD] IS NULL) " +
                "OR ([EAN_KOD] = @Original_EAN_KOD)) AND ((@IsNull_MINIMUM_KESZLET = 1 AND [MINIM" +
                "UM_KESZLET] IS NULL) OR ([MINIMUM_KESZLET] = @Original_MINIMUM_KESZLET)) AND ((@" +
                "IsNull_OPTIMALIS_KESZLET = 1 AND [OPTIMALIS_KESZLET] IS NULL) OR ([OPTIMALIS_KES" +
                "ZLET] = @Original_OPTIMALIS_KESZLET)) AND ((@IsNull_ELADASI_AR = 1 AND [ELADASI_" +
                "AR] IS NULL) OR ([ELADASI_AR] = @Original_ELADASI_AR)) AND ((@IsNull_HELYETTES_T" +
                "ERMEK = 1 AND [HELYETTES_TERMEK] IS NULL) OR ([HELYETTES_TERMEK] = @Original_HEL" +
                "YETTES_TERMEK)) AND ((@IsNull_MAX_KEDVEZMENY_SZ = 1 AND [MAX_KEDVEZMENY_SZ] IS N" +
                "ULL) OR ([MAX_KEDVEZMENY_SZ] = @Original_MAX_KEDVEZMENY_SZ)) AND ((@IsNull_MAX_K" +
                "EDVEZM_FT = 1 AND [MAX_KEDVEZM_FT] IS NULL) OR ([MAX_KEDVEZM_FT] = @Original_MAX" +
                "_KEDVEZM_FT)) AND ((@IsNull_MEGJEGYZES = 1 AND [MEGJEGYZES] IS NULL) OR ([MEGJEG" +
                "YZES] = @Original_MEGJEGYZES)) AND ((@IsNull_AKTIV = 1 AND [AKTIV] IS NULL) OR (" +
                "[AKTIV] = @Original_AKTIV)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGNEVEZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGNEVEZES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKK_TIPUS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_TIPUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKKCSOPORT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKCSOPORT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGYS_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SZJ_SZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIKKSZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EAN_KOD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MINIMUM_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ELADASI_AR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEGJEGYZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKK_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGNEVEZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGNEVEZES", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKK_TIPUS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKK_TIPUS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKKCSOPORT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKCSOPORT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ERTEKESITES_TIPUSA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ERTEKESITES_TIPUSA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MEGYS_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGYS_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGYS_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OTHER_FILTER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OTHER_FILTER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DEFAULT_RAKTAR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEFAULT_RAKTAR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SZJ_SZAM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SZJ_SZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SZJ_SZAM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CIKKSZAM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIKKSZAM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIKKSZAM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EAN_KOD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EAN_KOD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EAN_KOD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MINIMUM_KESZLET", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MINIMUM_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINIMUM_KESZLET", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPTIMALIS_KESZLET", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPTIMALIS_KESZLET", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ELADASI_AR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ELADASI_AR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ELADASI_AR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HELYETTES_TERMEK", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HELYETTES_TERMEK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAX_KEDVEZMENY_SZ", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZMENY_SZ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAX_KEDVEZM_FT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_KEDVEZM_FT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MEGJEGYZES", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MEGJEGYZES", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEGJEGYZES", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AKTIV", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AKTIV", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::e_Cafe.Properties.Settings.Default.ECAFEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        CIKK_ID, MEGNEVEZES, CIKK_TIPUS, CIKKCSOPORT_ID, ERTEKESITES_TIPUSA, MEGYS_ID, OTHER_FILTER_ID, DEFAULT_RAKTAR, SZJ_SZAM, 
                         CIKKSZAM, EAN_KOD, MINIMUM_KESZLET, OPTIMALIS_KESZLET, ELADASI_AR, HELYETTES_TERMEK, MAX_KEDVEZMENY_SZ, MAX_KEDVEZM_FT, 
                         MEGJEGYZES, AKTIV
FROM            CIKK";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ECAFEDataSetCIKK.CIKKDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ECAFEDataSetCIKK.CIKKDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ECAFEDataSetCIKK.CIKKDataTable dataTable = new ECAFEDataSetCIKK.CIKKDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ECAFEDataSetCIKK.CIKKDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ECAFEDataSetCIKK dataSet) {
            return this.Adapter.Update(dataSet, "CIKK");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CIKK_ID, 
                    string Original_MEGNEVEZES, 
                    int Original_CIKK_TIPUS, 
                    int Original_CIKKCSOPORT_ID, 
                    string Original_ERTEKESITES_TIPUSA, 
                    string Original_MEGYS_ID, 
                    global::System.Nullable<int> Original_OTHER_FILTER_ID, 
                    global::System.Nullable<int> Original_DEFAULT_RAKTAR, 
                    string Original_SZJ_SZAM, 
                    string Original_CIKKSZAM, 
                    string Original_EAN_KOD, 
                    global::System.Nullable<double> Original_MINIMUM_KESZLET, 
                    global::System.Nullable<double> Original_OPTIMALIS_KESZLET, 
                    global::System.Nullable<double> Original_ELADASI_AR, 
                    global::System.Nullable<int> Original_HELYETTES_TERMEK, 
                    global::System.Nullable<double> Original_MAX_KEDVEZMENY_SZ, 
                    global::System.Nullable<double> Original_MAX_KEDVEZM_FT, 
                    string Original_MEGJEGYZES, 
                    global::System.Nullable<int> Original_AKTIV) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CIKK_ID));
            if ((Original_MEGNEVEZES == null)) {
                throw new global::System.ArgumentNullException("Original_MEGNEVEZES");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MEGNEVEZES));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_CIKK_TIPUS));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_CIKKCSOPORT_ID));
            if ((Original_ERTEKESITES_TIPUSA == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ERTEKESITES_TIPUSA));
            }
            if ((Original_MEGYS_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_MEGYS_ID));
            }
            if ((Original_OTHER_FILTER_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_OTHER_FILTER_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_DEFAULT_RAKTAR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_DEFAULT_RAKTAR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_SZJ_SZAM == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_SZJ_SZAM));
            }
            if ((Original_CIKKSZAM == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_CIKKSZAM));
            }
            if ((Original_EAN_KOD == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_EAN_KOD));
            }
            if ((Original_MINIMUM_KESZLET.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((double)(Original_MINIMUM_KESZLET.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_OPTIMALIS_KESZLET.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((double)(Original_OPTIMALIS_KESZLET.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_ELADASI_AR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((double)(Original_ELADASI_AR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_HELYETTES_TERMEK.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((int)(Original_HELYETTES_TERMEK.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_MAX_KEDVEZMENY_SZ.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((double)(Original_MAX_KEDVEZMENY_SZ.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_MAX_KEDVEZM_FT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((double)(Original_MAX_KEDVEZM_FT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_MEGJEGYZES == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_MEGJEGYZES));
            }
            if ((Original_AKTIV.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((int)(Original_AKTIV.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string MEGNEVEZES, 
                    int CIKK_TIPUS, 
                    int CIKKCSOPORT_ID, 
                    string ERTEKESITES_TIPUSA, 
                    string MEGYS_ID, 
                    global::System.Nullable<int> OTHER_FILTER_ID, 
                    global::System.Nullable<int> DEFAULT_RAKTAR, 
                    string SZJ_SZAM, 
                    string CIKKSZAM, 
                    string EAN_KOD, 
                    global::System.Nullable<double> MINIMUM_KESZLET, 
                    global::System.Nullable<double> OPTIMALIS_KESZLET, 
                    global::System.Nullable<double> ELADASI_AR, 
                    global::System.Nullable<int> HELYETTES_TERMEK, 
                    global::System.Nullable<double> MAX_KEDVEZMENY_SZ, 
                    global::System.Nullable<double> MAX_KEDVEZM_FT, 
                    string MEGJEGYZES, 
                    global::System.Nullable<int> AKTIV) {
            if ((MEGNEVEZES == null)) {
                throw new global::System.ArgumentNullException("MEGNEVEZES");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MEGNEVEZES));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(CIKK_TIPUS));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(CIKKCSOPORT_ID));
            if ((ERTEKESITES_TIPUSA == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ERTEKESITES_TIPUSA));
            }
            if ((MEGYS_ID == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(MEGYS_ID));
            }
            if ((OTHER_FILTER_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(OTHER_FILTER_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((DEFAULT_RAKTAR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(DEFAULT_RAKTAR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SZJ_SZAM == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SZJ_SZAM));
            }
            if ((CIKKSZAM == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CIKKSZAM));
            }
            if ((EAN_KOD == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(EAN_KOD));
            }
            if ((MINIMUM_KESZLET.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(MINIMUM_KESZLET.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((OPTIMALIS_KESZLET.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(OPTIMALIS_KESZLET.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ELADASI_AR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(ELADASI_AR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((HELYETTES_TERMEK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(HELYETTES_TERMEK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((MAX_KEDVEZMENY_SZ.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(MAX_KEDVEZMENY_SZ.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MAX_KEDVEZM_FT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(MAX_KEDVEZM_FT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MEGJEGYZES == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(MEGJEGYZES));
            }
            if ((AKTIV.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(AKTIV.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MEGNEVEZES, 
                    int CIKK_TIPUS, 
                    int CIKKCSOPORT_ID, 
                    string ERTEKESITES_TIPUSA, 
                    string MEGYS_ID, 
                    global::System.Nullable<int> OTHER_FILTER_ID, 
                    global::System.Nullable<int> DEFAULT_RAKTAR, 
                    string SZJ_SZAM, 
                    string CIKKSZAM, 
                    string EAN_KOD, 
                    global::System.Nullable<double> MINIMUM_KESZLET, 
                    global::System.Nullable<double> OPTIMALIS_KESZLET, 
                    global::System.Nullable<double> ELADASI_AR, 
                    global::System.Nullable<int> HELYETTES_TERMEK, 
                    global::System.Nullable<double> MAX_KEDVEZMENY_SZ, 
                    global::System.Nullable<double> MAX_KEDVEZM_FT, 
                    string MEGJEGYZES, 
                    global::System.Nullable<int> AKTIV, 
                    int Original_CIKK_ID, 
                    string Original_MEGNEVEZES, 
                    int Original_CIKK_TIPUS, 
                    int Original_CIKKCSOPORT_ID, 
                    string Original_ERTEKESITES_TIPUSA, 
                    string Original_MEGYS_ID, 
                    global::System.Nullable<int> Original_OTHER_FILTER_ID, 
                    global::System.Nullable<int> Original_DEFAULT_RAKTAR, 
                    string Original_SZJ_SZAM, 
                    string Original_CIKKSZAM, 
                    string Original_EAN_KOD, 
                    global::System.Nullable<double> Original_MINIMUM_KESZLET, 
                    global::System.Nullable<double> Original_OPTIMALIS_KESZLET, 
                    global::System.Nullable<double> Original_ELADASI_AR, 
                    global::System.Nullable<int> Original_HELYETTES_TERMEK, 
                    global::System.Nullable<double> Original_MAX_KEDVEZMENY_SZ, 
                    global::System.Nullable<double> Original_MAX_KEDVEZM_FT, 
                    string Original_MEGJEGYZES, 
                    global::System.Nullable<int> Original_AKTIV) {
            if ((MEGNEVEZES == null)) {
                throw new global::System.ArgumentNullException("MEGNEVEZES");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MEGNEVEZES));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(CIKK_TIPUS));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(CIKKCSOPORT_ID));
            if ((ERTEKESITES_TIPUSA == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ERTEKESITES_TIPUSA));
            }
            if ((MEGYS_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(MEGYS_ID));
            }
            if ((OTHER_FILTER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(OTHER_FILTER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((DEFAULT_RAKTAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(DEFAULT_RAKTAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SZJ_SZAM == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SZJ_SZAM));
            }
            if ((CIKKSZAM == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CIKKSZAM));
            }
            if ((EAN_KOD == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(EAN_KOD));
            }
            if ((MINIMUM_KESZLET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(MINIMUM_KESZLET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((OPTIMALIS_KESZLET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(OPTIMALIS_KESZLET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ELADASI_AR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(ELADASI_AR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((HELYETTES_TERMEK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(HELYETTES_TERMEK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((MAX_KEDVEZMENY_SZ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(MAX_KEDVEZMENY_SZ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MAX_KEDVEZM_FT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(MAX_KEDVEZM_FT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MEGJEGYZES == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(MEGJEGYZES));
            }
            if ((AKTIV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(AKTIV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_CIKK_ID));
            if ((Original_MEGNEVEZES == null)) {
                throw new global::System.ArgumentNullException("Original_MEGNEVEZES");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_MEGNEVEZES));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_CIKK_TIPUS));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_CIKKCSOPORT_ID));
            if ((Original_ERTEKESITES_TIPUSA == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_ERTEKESITES_TIPUSA));
            }
            if ((Original_MEGYS_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_MEGYS_ID));
            }
            if ((Original_OTHER_FILTER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_OTHER_FILTER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_DEFAULT_RAKTAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_DEFAULT_RAKTAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_SZJ_SZAM == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_SZJ_SZAM));
            }
            if ((Original_CIKKSZAM == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_CIKKSZAM));
            }
            if ((Original_EAN_KOD == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_EAN_KOD));
            }
            if ((Original_MINIMUM_KESZLET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(Original_MINIMUM_KESZLET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_OPTIMALIS_KESZLET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(Original_OPTIMALIS_KESZLET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_ELADASI_AR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((double)(Original_ELADASI_AR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_HELYETTES_TERMEK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(Original_HELYETTES_TERMEK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_MAX_KEDVEZMENY_SZ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(Original_MAX_KEDVEZMENY_SZ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_MAX_KEDVEZM_FT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((double)(Original_MAX_KEDVEZM_FT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_MEGJEGYZES == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_MEGJEGYZES));
            }
            if ((Original_AKTIV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_AKTIV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CIKKTableAdapter _cIKKTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CIKKTableAdapter CIKKTableAdapter {
            get {
                return this._cIKKTableAdapter;
            }
            set {
                this._cIKKTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cIKKTableAdapter != null) 
                            && (this._cIKKTableAdapter.Connection != null))) {
                    return this._cIKKTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cIKKTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ECAFEDataSetCIKK dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cIKKTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CIKK.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cIKKTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ECAFEDataSetCIKK dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cIKKTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CIKK.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cIKKTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ECAFEDataSetCIKK dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._cIKKTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CIKK.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cIKKTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ECAFEDataSetCIKK dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._cIKKTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cIKKTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cIKKTableAdapter != null)) {
                    revertConnections.Add(this._cIKKTableAdapter, this._cIKKTableAdapter.Connection);
                    this._cIKKTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cIKKTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cIKKTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cIKKTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cIKKTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cIKKTableAdapter != null)) {
                    this._cIKKTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cIKKTableAdapter]));
                    this._cIKKTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591